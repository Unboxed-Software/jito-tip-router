/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU128Decoder,
  getU128Encoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type ReadonlyUint8Array,
} from '@solana/web3.js';

export type StMintEntry = {
  stMint: Address;
  rewardMultiplierBps: bigint;
  reservedRewardMultiplierBps: bigint;
  reserveSwitchboardFeed: ReadonlyUint8Array;
  noFeedWeight: bigint;
  reserved: Array<number>;
};

export type StMintEntryArgs = {
  stMint: Address;
  rewardMultiplierBps: number | bigint;
  reservedRewardMultiplierBps: number | bigint;
  reserveSwitchboardFeed: ReadonlyUint8Array;
  noFeedWeight: number | bigint;
  reserved: Array<number>;
};

export function getStMintEntryEncoder(): Encoder<StMintEntryArgs> {
  return getStructEncoder([
    ['stMint', getAddressEncoder()],
    ['rewardMultiplierBps', getU64Encoder()],
    ['reservedRewardMultiplierBps', getU64Encoder()],
    ['reserveSwitchboardFeed', fixEncoderSize(getBytesEncoder(), 32)],
    ['noFeedWeight', getU128Encoder()],
    ['reserved', getArrayEncoder(getU8Encoder(), { size: 128 })],
  ]);
}

export function getStMintEntryDecoder(): Decoder<StMintEntry> {
  return getStructDecoder([
    ['stMint', getAddressDecoder()],
    ['rewardMultiplierBps', getU64Decoder()],
    ['reservedRewardMultiplierBps', getU64Decoder()],
    ['reserveSwitchboardFeed', fixDecoderSize(getBytesDecoder(), 32)],
    ['noFeedWeight', getU128Decoder()],
    ['reserved', getArrayDecoder(getU8Decoder(), { size: 128 })],
  ]);
}

export function getStMintEntryCodec(): Codec<StMintEntryArgs, StMintEntry> {
  return combineCodec(getStMintEntryEncoder(), getStMintEntryDecoder());
}
