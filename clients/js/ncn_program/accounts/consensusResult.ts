/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/web3.js';

export type ConsensusResult = {
  discriminator: bigint;
  ncn: Address;
  epoch: bigint;
  voteWeight: bigint;
  totalVoteWeight: bigint;
  consensusSlot: bigint;
  bump: number;
  weatherStatus: number;
};

export type ConsensusResultArgs = {
  discriminator: number | bigint;
  ncn: Address;
  epoch: number | bigint;
  voteWeight: number | bigint;
  totalVoteWeight: number | bigint;
  consensusSlot: number | bigint;
  bump: number;
  weatherStatus: number;
};

export function getConsensusResultEncoder(): Encoder<ConsensusResultArgs> {
  return getStructEncoder([
    ['discriminator', getU64Encoder()],
    ['ncn', getAddressEncoder()],
    ['epoch', getU64Encoder()],
    ['voteWeight', getU64Encoder()],
    ['totalVoteWeight', getU64Encoder()],
    ['consensusSlot', getU64Encoder()],
    ['bump', getU8Encoder()],
    ['weatherStatus', getU8Encoder()],
  ]);
}

export function getConsensusResultDecoder(): Decoder<ConsensusResult> {
  return getStructDecoder([
    ['discriminator', getU64Decoder()],
    ['ncn', getAddressDecoder()],
    ['epoch', getU64Decoder()],
    ['voteWeight', getU64Decoder()],
    ['totalVoteWeight', getU64Decoder()],
    ['consensusSlot', getU64Decoder()],
    ['bump', getU8Decoder()],
    ['weatherStatus', getU8Decoder()],
  ]);
}

export function getConsensusResultCodec(): Codec<
  ConsensusResultArgs,
  ConsensusResult
> {
  return combineCodec(getConsensusResultEncoder(), getConsensusResultDecoder());
}

export function decodeConsensusResult<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<ConsensusResult, TAddress>;
export function decodeConsensusResult<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<ConsensusResult, TAddress>;
export function decodeConsensusResult<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<ConsensusResult, TAddress>
  | MaybeAccount<ConsensusResult, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getConsensusResultDecoder()
  );
}

export async function fetchConsensusResult<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<ConsensusResult, TAddress>> {
  const maybeAccount = await fetchMaybeConsensusResult(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeConsensusResult<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<ConsensusResult, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeConsensusResult(maybeAccount);
}

export async function fetchAllConsensusResult(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<ConsensusResult>[]> {
  const maybeAccounts = await fetchAllMaybeConsensusResult(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeConsensusResult(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<ConsensusResult>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeConsensusResult(maybeAccount)
  );
}
